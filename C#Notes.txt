Semicolon at the end of each expression!!!

Console.Writeline("text"); also
Console.Write() #leaves curser on current line
Console.ReadLine() #Reads a line 
Console.Read() #Reads one character at a time

Formated Output:
    Python [(f'')] == C# [($'')]

CONVERTING TYPES
    int.Parse(var) #Takes a string into a variable
    <or>
    int var = 42;
    string textVersion = var.ToString();  #Takes an integer into a string

BUILT-IN VARIBABLE TYPES
    int - Integers (whole numbers, positive and negative)
    string - Strings (a sequence of characters, including letters, numbers, or symbols)
    float - Floating point numbers (numbers that use decimals)
    double - Double precision floating point numbers (just like a float, except it takes up twice as much memory, so it can hold larger numbers or numbers with more decimal places)
    bool - Boolean variables (true or false)

INPUTS
    Python: color = input("What is your favorite color? ")
    C#: Console.Write("What is your favorite color? ");
        string color = Console.ReadLine();

CURLY BRACES DEFINE BLOCKS
    C#
    if (x > y)
    {
    Console.WriteLine("greater than");
    }
    Python
    if x > y:
    print("greater")

IF\ELSE IF\ELSE STATEMENTS
    C#
    if (x > y)
    {
        Console.WriteLine("greater than y");
    }
    else if (x > z)
    {
        Console.WriteLine("greater than z");
    }
    else
    {
        Console.WriteLine("less than both");
    }
    Python
    if x > y:
        print("greater than y")
    elif x > z:
        print("greater than z")
    else:
        print("less than both")

AND,OR,NOT OPERATORS
    In C#, the 'and' operator is (&&) the 'or' operator is (||) and the 
    'not' operator is (!) which can be combined together with 
    other expressions and parentheses.

VARIABLES & TYPES
    In C#, the naming convention for variables is to use "camel case." 
    This means that the variable starts with a lower case letter and 
    then additional words in the variable start with an upper case 
    letter like humps on a camel:
        string color;
        string firstName;
        string lastName;
        int velocityBeforeImpactWasMade;

FOR LOOPS


OBJECT ORIENTED PROGRAMMING (OOP)
    Variable - noun/thing - name, age, numbers
    Function - verb - do something, EX[calculateOutput()]
    Object - also noun/thing - 
        Combine variables (attributes) and functions (methods) into a one 
        datatype (class)
        Oject - instantiation (creation) of class, EX[recipe & cake]
    Classes include:
        name
        attributes (data/variables)
        methods (functions)
    Class creation
        1. Name class
        2. Divide class methods
        3. Create class attributes
    Class Diagram:
    [Name: ----------------- ]
    [Attributes: (var:type)  ]
    [Methods: functionType() ]

FUNCTIONS()/METHODS()
    returnType FunctionName(dataType parameter1, dataType parameter2)
    {
    // function_body
    }

    <NO parameters or a return type (hence the use of void)>
    [C#]
    void DisplayMessage()
    {
        Console.WriteLine("Hello world!");
    }
    [PYTHON]
    def display_message():
        print("Hello World")

    <Function that accepts two integers as parameters, adds them together and returns the result. 
    Notice function specifies return value of int at beginning of definition.>
    [C#]
    int AddNumbers(int first, int second)
    {
        int sum = first + second;
        return sum;
    }
    [PYTHON]
    def add_numbers(first, second):
        sum = first + second
        return sum

SWITCH CASES***

CONSTRUCTORS***

INHERTITANCE
    "Is-A" Inheritance - Inherits from another class --> Hierarchal
    Ex: A Car Is-A vehicle, A Child Is-A person. 
    (Base/Derived, Parent/Child) class
    - Place common data & methods in base class
    - Place unique data & methods in derived class

POLYMORPHISM
    "Poly" --> Many, serveral, multi
    "Morph" --> change
    - Takes on many forms & different behavior based upon context
    - "virtual" vs "abstract [classes]" methods***
    - "Interfaces" classes (code) are a special abstract class with all abstrat methods
    EX: Work/Act like a parent/base class 
        - Looping through objects of base class type
        - passing objects as parameters as base class type
        - returning ojects of the base-type class
        

        
    


    

